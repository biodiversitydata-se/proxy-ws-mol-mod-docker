server {
    listen 80;
    listen [::]:80;

    server_name asv-portal.biodiversitydata.se;

    location / {
        return 301 https://asv-portal.biodiversitydata.se$request_uri;
    }
}

server {
    listen 443 ssl default_server;
    listen [::]:443 ssl default_server;
    http2 on;

    server_name asv-portal.biodiversitydata.se;

    ssl_certificate /etc/nginx/certs/biodiversitydata.se.crt;
    ssl_certificate_key /etc/nginx/certs/biodiversitydata.se.key;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;

    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    location / {
        client_max_body_size 800m;

        proxy_http_version 1.1;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header Proxy "";
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_pass http://asv-main:5000;
    }

   location ~* \.(?:css|js|cur|jpe?g|gif|htc|ico|png|html|xml|otf|ttf|eot|woff|woff2|svg)$ {
        # MPed: Changed from 7d
        expires 5m;
        add_header Pragma public;
        # MPed: Changed from Cache-Control public
        # no-cache:         forces caches to submit the request to the origin server for validation before releasing a
        #                   cached copy, every time. This is useful to assure that authentication is respected
        #                   (in combination with public), or to maintain rigid freshness, without sacrificing all of the
        #                   benefits of caching.
        #
        # public:           marks authenticated responses as cacheable; normally, if HTTP authentication is required,
        #                   responses are automatically private.
        #
        # must-revalidate:  tells caches that they must obey any freshness information you give them about a
        #                   representation. HTTP allows caches to serve stale representations under special conditions;
        #                   by specifying this header, you’re telling the cache that you want it to strictly follow
        #                   your rules.
        #
        # proxy-revalidate: similar to must-revalidate, except that it only applies to proxy caches.
        #
        add_header Cache-Control "no-cache, public, must-revalidate, proxy-revalidate";
        proxy_pass http://asv-main:5000;
    }

    if ($http_user_agent ~* LWP::Simple|BBBike|wget) {
        return 403;
    }

    location ~ /\.(?!well-known) {
        deny all;
    }

    # Use custom error page when ASV-portal is down, and make nginx report 503 (Service Unavailable) instead of 502 (Bad gateway)
    error_page 502 =503 /503.html;
    location = /503.html {
            root /usr/share/nginx/html;
            internal;
    }

    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml application/json application/javascript application/rss+xml application/atom+xml image/svg+xml;
}

server {
    listen 8081 proxy_protocol;
    listen [::]:8081 proxy_protocol;
    http2 on;

    set_real_ip_from 192.121.208.0/23;
    real_ip_header proxy_protocol;

    server_name asv-portal.biodiversitydata.se;

    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;

    location / {
        client_max_body_size 800m;

        proxy_http_version 1.1;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header Proxy "";
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_pass http://asv-main:5000;
    }

   location ~* \.(?:css|js|cur|jpe?g|gif|htc|ico|png|html|xml|otf|ttf|eot|woff|woff2|svg)$ {
        # MPed: Changed from 7d
        expires 5m;
        add_header Pragma public;
        # MPed: Changed from Cache-Control public
        # no-cache:         forces caches to submit the request to the origin server for validation before releasing a
        #                   cached copy, every time. This is useful to assure that authentication is respected
        #                   (in combination with public), or to maintain rigid freshness, without sacrificing all of the
        #                   benefits of caching.
        #
        # public:           marks authenticated responses as cacheable; normally, if HTTP authentication is required,
        #                   responses are automatically private.
        #
        # must-revalidate:  tells caches that they must obey any freshness information you give them about a
        #                   representation. HTTP allows caches to serve stale representations under special conditions;
        #                   by specifying this header, you’re telling the cache that you want it to strictly follow
        #                   your rules.
        #
        # proxy-revalidate: similar to must-revalidate, except that it only applies to proxy caches.
        #
        add_header Cache-Control "no-cache, public, must-revalidate, proxy-revalidate";
        proxy_pass http://asv-main:5000;
    }

    if ($http_user_agent ~* LWP::Simple|BBBike|wget) {
        return 403;
    }

    location ~ /\.(?!well-known) {
        deny all;
    }

    # Use custom error page when ASV-portal is down, and make nginx report 503 (Service Unavailable) instead of 502 (Bad gateway)
    error_page 502 =503 /503.html;
    location = /503.html {
            root /usr/share/nginx/html;
            internal;
    }

    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml application/json application/javascript application/rss+xml application/atom+xml image/svg+xml;
}
